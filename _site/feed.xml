<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-10-06T09:20:28+03:00</updated><id>/feed.xml</id><title type="html">Beware of Ohkvuck Aykseel</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description. #baseurl: &quot;&quot; # the subpath of your site, e.g. /blog</subtitle><entry><title type="html">DDS discovery tool for ROS2 ecosystem</title><link href="/2023/10/03/DDS-discovery-tool-for-ROS2-ecosystem.html" rel="alternate" type="text/html" title="DDS discovery tool for ROS2 ecosystem" /><published>2023-10-03T00:00:00+03:00</published><updated>2023-10-03T00:00:00+03:00</updated><id>/2023/10/03/DDS-discovery-tool-for-ROS2-ecosystem</id><content type="html" xml:base="/2023/10/03/DDS-discovery-tool-for-ROS2-ecosystem.html">&lt;p&gt;&lt;strong&gt;Author&lt;/strong&gt; - Kuchkov Aleksey&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Hello everyone, I want to introduce my hobby project - ROS2 Monitor. The main goal of the project is to provide a detailed information about the ROS2 ecosystem for introspection purposes. The detail information collected with FastDDS middleware (there is the plans to extend information sources) and ROS2 CLI tools. The main benefit of of direct usage the api of middleware is the possibility to obtain details that unaccessible with standard ROS2 CLI.&lt;/p&gt;

&lt;p&gt;To sum up, the program at the current moment is more like a concept (or minimal example) rather than ready to use solution. The main idea is to get feedback about the viability of this approach. And the another goal I am leading to is to find the people who may involve into developing process along with me because the task itself contains a lot of details that can be a hardly implemented single alone.&lt;/p&gt;

&lt;p&gt;The program has client server architecture where the server part is implemented as a system daemon written in Rust, and the client is the C++ gui application. The server api can be accessed through JSON command description written to the daemon’s socket file (Unix Domain Socket) - /tmp/ros2monitor.sock. Thus, any program which implements the JSON api may become a client. The examples of information you may obtain from the daemon:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Information about the host ROS2 node running on (IP, hostname);&lt;/li&gt;
  &lt;li&gt;Detailed QOS info, like message transport type: UDPv4, TCPv4, UDPv6, TCPv6, SHM;&lt;/li&gt;
  &lt;li&gt;Lifecycle node control: configure, activate, deactivate, cleanup, shutdown (under development)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The tool is supposed to be used with ROS2 ecosystem without any hardware manufacturer lock to make the possibility for nodes to be running on completely different devices in the same network.&lt;/p&gt;

&lt;h1 id=&quot;inspiration-sources&quot;&gt;Inspiration sources&lt;/h1&gt;
&lt;p&gt;As the main inspiration source, I took the Nvidia SDK, which includes the program with the name Graph Composer. It allows you to create computer vision application with a graphical approach (via graph editing). But the main goals of my prototype are slightly different. They include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Provide the topology observation tool with deep traffic data analysis for ROS2 ecosystem;&lt;/li&gt;
  &lt;li&gt;Give a possibility to debug ROS2 nodes with their’s topics visualization in real-time;&lt;/li&gt;
  &lt;li&gt;Provide a tool for lifecycle node control;&lt;/li&gt;
  &lt;li&gt;Grant a way for filesystem package observing with corresponding detailed information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, my decision was to implement an architecture that would allows to use multiple types of clients, including web ones. The picture below demonstrates this idea:
&lt;img src=&quot;/biblblog/assets/ros2monitor_scheme.webp&quot; alt=&quot;./ros2monitor_scheme.svg&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-daemon-architecture&quot;&gt;The daemon architecture&lt;/h1&gt;
&lt;p&gt;The daemon has several configuration flags that determine it’s behavior. At the current moment, there is only two possible variants. The first one, uses the bare ROS2 CLI.
The another uses FastDDS discoverer server. Thus, considering the fact that FastDDS is the default middleware implementation, the combination of ROS2 CLI and FastDDS server covers the major part of needs. Having said that, there is a plan to implement the micro-ros support in the future.&lt;/p&gt;

&lt;p&gt;As being said, the daemon has communication channel through Unix Domain Sockets with JSON requests. The typical request looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-JSON&quot;&gt;{ 
    &quot;command&quot;: &quot;state&quot;, 
    &quot;arguments&quot;: [] 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with the following response:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-JSON&quot;&gt;{
   &quot;nodes&quot;:[
      {
         &quot;action_clients&quot;:[],
         &quot;action_servers&quot;:[],
         &quot;host&quot;:{
            &quot;ip&quot;:&quot;192.168.0.46&quot;,
            &quot;name&quot;:&quot;raspberrypi.Dlink&quot;
         },
         &quot;is_lifecycle&quot;:false,
         &quot;name&quot;:&quot;turtlesim&quot;,
         &quot;package_name&quot;:&quot;&quot;,
         &quot;publishers&quot;:[
            {
               &quot;guid&quot;:&quot;01.0f.04.aa.41.2c.03.e1.01.00.00.00&quot;,
               &quot;host&quot;:{
                  &quot;ip&quot;:&quot;192.168.0.46&quot;,
                  &quot;name&quot;:&quot;raspberrypi.Dlink&quot;
               },
               &quot;node_name&quot;:&quot;turtlesim&quot;,
               &quot;topic_name&quot;:&quot;ros_discovery_info&quot;,
               &quot;topic_type&quot;:&quot;rmw_dds_common::msg::dds_::ParticipantEntitiesInfo_&quot;
            },
            {
               &quot;guid&quot;:&quot;01.0f.04.aa.41.2c.03.e1.01.00.00.00&quot;,
               &quot;host&quot;:{
                  &quot;ip&quot;:&quot;192.168.0.46&quot;,
                  &quot;name&quot;:&quot;raspberrypi.Dlink&quot;
               },
               &quot;node_name&quot;:&quot;turtlesim&quot;,
               &quot;topic_name&quot;:&quot;parameter_events&quot;,
               &quot;topic_type&quot;:&quot;rcl_interfaces::msg::dds_::ParameterEvent_&quot;
            },
            {
               &quot;guid&quot;:&quot;01.0f.04.aa.41.2c.03.e1.01.00.00.00&quot;,
               &quot;host&quot;:{
                  &quot;ip&quot;:&quot;192.168.0.46&quot;,
                  &quot;name&quot;:&quot;raspberrypi.Dlink&quot;
               },
               &quot;node_name&quot;:&quot;turtlesim&quot;,
               &quot;topic_name&quot;:&quot;clearReply&quot;,
               &quot;topic_type&quot;:&quot;std_srvs::srv::dds_::Empty_Response_&quot;
            },
            {
               &quot;guid&quot;:&quot;01.0f.04.aa.41.2c.03.e1.01.00.00.00&quot;,
               &quot;host&quot;:{
                  &quot;ip&quot;:&quot;192.168.0.46&quot;,
                  &quot;name&quot;:&quot;raspberrypi.Dlink&quot;
               },
               &quot;node_name&quot;:&quot;turtlesim&quot;,
               &quot;topic_name&quot;:&quot;spawnReply&quot;,
               &quot;topic_type&quot;:&quot;turtlesim::srv::dds_::Spawn_Response_&quot;
            },
            {
               &quot;guid&quot;:&quot;01.0f.04.aa.41.2c.03.e1.01.00.00.00&quot;,
               &quot;host&quot;:{
                  &quot;ip&quot;:&quot;192.168.0.46&quot;,
                  &quot;name&quot;:&quot;raspberrypi.Dlink&quot;
               },
               &quot;node_name&quot;:&quot;&quot;,
               &quot;topic_name&quot;:&quot;killReply&quot;,
               &quot;topic_type&quot;:&quot;turtlesim::srv::dds_::Kill_Response_&quot;
            },
            {
               &quot;guid&quot;:&quot;01.0f.04.aa.41.2c.03.e1.01.00.00.00&quot;,
               &quot;host&quot;:{
                  &quot;ip&quot;:&quot;192.168.0.46&quot;,
                  &quot;name&quot;:&quot;raspberrypi.Dlink&quot;
               },
               &quot;node_name&quot;:&quot;turtlesim&quot;,
               &quot;topic_name&quot;:&quot;turtle1/set_penReply&quot;,
               &quot;topic_type&quot;:&quot;turtlesim::srv::dds_::SetPen_Response_&quot;
            }
         ],
         &quot;service_clients&quot;:[],
         &quot;service_servers&quot;:[],
         &quot;state&quot;:&quot;Unconfigured&quot;,
         &quot;subscribers&quot;:[]
      },
      {
         &quot;action_clients&quot;:[],
         &quot;action_servers&quot;:[],
         &quot;host&quot;:{
            &quot;ip&quot;:&quot;192.168.0.46&quot;,
            &quot;name&quot;:&quot;raspberrypi.Dlink&quot;
         },
         &quot;is_lifecycle&quot;:false,
         &quot;name&quot;:&quot;turtle_teleop_key&quot;,
         &quot;package_name&quot;:&quot;&quot;,
         &quot;publishers&quot;:[
            {
               &quot;guid&quot;:&quot;01.0f.04.aa.41.2c.03.e1.01.00.00.00&quot;,
               &quot;host&quot;:{
                  &quot;ip&quot;:&quot;192.168.0.46&quot;,
                  &quot;name&quot;:&quot;raspberrypi.Dlink&quot;
               },
               &quot;node_name&quot;:&quot;turtle_teleop_key&quot;,
               &quot;topic_name&quot;:&quot;turtle1/pose&quot;,
               &quot;topic_type&quot;:&quot;turtlesim::msg::dds_::Pose_&quot;
            },
            {
               &quot;guid&quot;:&quot;01.0f.04.aa.41.2c.03.e1.01.00.00.00&quot;,
               &quot;host&quot;:{
                  &quot;ip&quot;:&quot;192.168.0.46&quot;,
                  &quot;name&quot;:&quot;raspberrypi.Dlink&quot;
               },
               &quot;node_name&quot;:&quot;turtle_teleop_key&quot;,
               &quot;topic_name&quot;:&quot;turtle1/color_sensor&quot;,
               &quot;topic_type&quot;:&quot;turtlesim::msg::dds_::Color_&quot;
            }
         ],
         &quot;service_clients&quot;:[],
         &quot;service_servers&quot;:[],
         &quot;state&quot;:&quot;Unconfigured&quot;,
         &quot;subscribers&quot;:[]
      }
   ],
   &quot;packages&quot;:[],
   &quot;topics&quot;:[]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The daemon’s response contains information about two nodes: turtlesim and turtle_teleop_key running on the Raspberry Pi host in the same network.&lt;/p&gt;
&lt;h1 id=&quot;the-client&quot;&gt;The client&lt;/h1&gt;
&lt;p&gt;The client is written using C++ with Qt and QML. I have chosen these technologies as closest to me. The main task of the client is to provide a user graphical user interface for communicating with the daemon. The client implementation uses Asio library for talking to the daemon. The images below demonstrate the UI of the client:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/biblblog/assets/client_ui3.png&quot; alt=&quot;ui_client&quot; /&gt;
On the image above you can find several key elements:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Graph area. It is the field where nodes rendered with their topic communication topology;&lt;/li&gt;
  &lt;li&gt;Visualization area. This place is being used for visualizing topic data in real time;&lt;/li&gt;
  &lt;li&gt;Topic list area. It contains all of the topics in the considered domain id;&lt;/li&gt;
  &lt;li&gt;Node observer. Used to show currently running nodes in domain id;&lt;/li&gt;
  &lt;li&gt;Package observer. Contains filesystem ROS2 packages in specific workspace.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the major task of the client is the topic visualization feature. To open the visualization widget, you have to click to the plus button near the corresponding topic name on the topic list widget (shown with number 3)&lt;/p&gt;

&lt;p&gt;On the proposed video, you can observe the example of the point cloud topic visualization (sensor_msgs::msg::PointCloud2).&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;/biblblog/assets/Video_demo.mp4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;restrictions&quot;&gt;Restrictions&lt;/h1&gt;
&lt;p&gt;At the current moment, there are many features not yet implemented:
Visualization works correctly with a single publisher per topic only;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Parameter customizations (like domain id, server ip, server port) are hardcoded;&lt;/li&gt;
  &lt;li&gt;It isn’t possible to save the current workspace to text file (in plans);&lt;/li&gt;
  &lt;li&gt;And another dozens of bugs that I’m fixing little by little.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;development-roadmap&quot;&gt;Development roadmap&lt;/h1&gt;
&lt;p&gt;First of all, I want to stabilize the declared features to make them work properly. There is a lot of work with lifecycle node controlling, optimizing the discovery process, and topic visualization. The main goal is to establish the lifecycle node controlling with topic visualization for most widespread types.&lt;/p&gt;

&lt;p&gt;Another goal is to implement the feature for workspace saving into text files and loading workspaces from these files and some sort of node templates. It can be done without huge efforts because the daemon itself uses JSON representation for ROS2 nodes internally. Node templates, in their turn, requires a little more work to have done due to the requirement of writing some wrappers for nodes located in the user’s filesystem. These wrappers, having wrote once, would be used as the templates for nodes which perform particular type of task, like object detection, image preprocessing, data visualization, to name a few with minimum amount of the code written by program’s user.&lt;/p&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;
&lt;p&gt;The entire source code can be found in repositories in github:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Client: https://github.com/Biblbrox/ROS2Dashboard&lt;/li&gt;
  &lt;li&gt;Server: https://github.com/Biblbrox/robot_controller&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Author - Kuchkov Aleksey</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/logo.jpeg" /><media:content medium="image" url="/assets/logo.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">DDS middlewares and their correspondence with ROS2 entities</title><link href="/2023/08/27/middleware-paper.html" rel="alternate" type="text/html" title="DDS middlewares and their correspondence with ROS2 entities" /><published>2023-08-27T00:00:00+03:00</published><updated>2023-08-27T00:00:00+03:00</updated><id>/2023/08/27/middleware-paper</id><content type="html" xml:base="/2023/08/27/middleware-paper.html">&lt;p&gt;&lt;strong&gt;Author&lt;/strong&gt; - Kuchkov Aleksey&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hello everyone. I have a deal with ROS/ROS2 very often due to my professional needs and hobby interests. My latest hobby project is tightly coupled with such low-level tools as ROS2 middlewares, which represent internal implementation of ROS nodes, topics, subscribers, publishers, services, etc. In most cases, it is unnecessary to think about such low-level features being satisfied with ROS api/cli only. Having said that, sometimes you may run into obstacles due to ROS2 limitation, especially in topology discovering and diagnostic. For example, if you want to find the IP address of the machine ROS2 node runs on, you may struggle with CLI limitations.&lt;/p&gt;

&lt;p&gt;I had a struggle with FastDDS for a while, and I want to share some of the knowledge I had obtained during the hard research process. Maybe it could help someone to save time a little bit.&lt;/p&gt;

&lt;p&gt;ROS2 uses FastDDS middleware by default, so this note is about FastDDS although all of the middlewares implement DDS standard more-less. Therefore, the knowledge about FastDDS concerns is not only applicable to eProsima implementation but to all of the middlewares, in terms of DDS standard at least.&lt;/p&gt;

&lt;p&gt;Firstly, it is unnecessary to get an idea about what the middleware serve for in ROS ecosystem.  The main task of a middleware is to provide an internal implementation of ros2 entities. Due to a variety of the platforms in which ros2 can be run on, it is necessary to have multiple implementations with transparent internal switching mechanism. For example, eProsima FastDDS is the default ros2 middleware, while there are such implementations as Eclipse Cyclone DDS, Connext DDS, GurumDDS and Micro XRCE-DDS (for MicroROS).&lt;/p&gt;

&lt;p&gt;There is some mess about the RTPS and DDS terminology. Although they are often used together, they represent the different layers in a network. DDS stands for Data Distribution Service that represents publisher-subscriber paradigm with rich type system and QoS (Quality of Service) features built-in. The RTPS (also known as &lt;a href=&quot;https://www.omg.org/spec/DDSI-RTPS/&quot;&gt;DDSI-RTPS&lt;/a&gt;) has the goal is to provide network and IPC communication at lower level. While the most DDS implementations use RTPS internally for delivering messages, this is not always the case. Furthermore, you can use bare RTPS without any typing system, but you do not have to do such clever tricks mostly.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/biblblog/assets/DDS_concept.svg&quot; alt=&quot;DDS_concept.svg&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;em&gt;FastDDS network example&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;discovering-dds-network-using-fastdds-c-api&quot;&gt;Discovering DDS network using FastDDS C++ API&lt;/h2&gt;
&lt;p&gt;FastDDS has it own mechanism to discover participants, subscribers, and publishers. We can use it with inhereting the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eprosima::FastDDS::dds::DomainParticipantListener&lt;/code&gt; and implementing the methods &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on_participant_discovery&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on_subscriber_discovery&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on_publisher_discovery&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on_type_discovery&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each of these methods has two arguments: a participant, which a discovered event belongs to, and information about an event.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;on_participant_discovery&lt;/strong&gt; called when a new participant appeared in the network. Keep in mind that one participant may hold multiple ros2 nodes depending on which context these nodes were created. Nodes created in a single context will be stored in a single participant, whereas nodes in different contexts will be stored in separate participants.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;on_subscriber_discovery&lt;/strong&gt; and &lt;strong&gt;on_publisher_discovery&lt;/strong&gt; called when a new writer or reader discovered.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;on_type_discovery&lt;/strong&gt; called when a new type is discovered.&lt;/p&gt;

&lt;h2 id=&quot;dds-ros2-correspondence&quot;&gt;DDS-ROS2 correspondence&lt;/h2&gt;
&lt;p&gt;ROS2 uses nodes as the main objects that hold subscribers, publishers, and other entities inside. FastDDS, on the other hand, doesn’t have such type of objects. Instead, it uses participants as the reader/writer(publisher/subscriber) holders, which may cause some confusion due to the similarity of terms. But there is the caution - there is no direct correspondence between ROS2 nodes and FastDDS participants since Foxy. So, a single participant may hold multiple ROS2 nodes. Moreover, there is no such thing as ROS2 Context in FastDDS. The table below is taken from ROS2 documentation and represents correspondence between ROS2 and FastDDS.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ROS entity&lt;/th&gt;
      &lt;th&gt;Fast DDS entity since Foxy&lt;/th&gt;
      &lt;th&gt;Fast DDS entity in Eloquent &amp;amp; below&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Context&lt;/td&gt;
      &lt;td&gt;Participant&lt;/td&gt;
      &lt;td&gt;Not DDS direct mapping&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Node&lt;/td&gt;
      &lt;td&gt;Not DDS direct mapping&lt;/td&gt;
      &lt;td&gt;Participant&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;What entities we can relay on are publishers and subscribers. So, we have to find some mechanism to find ros2 entity using only publishers and subscribers. We can relay on the fact that every ROS2 node has a built-in topic named /rosout, which is used for logging purposes. So, having found a topic gid, we can find the corresponding topic using ROS2 api. Thus, obtaining a node name becomes an easy goal.
In order to find a topic GID, we may use the method guid() of info object in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eprosima::fastrtps::rtps::WriterDiscoveryInfo&lt;/code&gt; argument in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on_publisher_discovery&lt;/code&gt;. Due to the fact that every node has a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/rosout&lt;/code&gt; topic, we can make a condition to filter other publishers.
The code below demonstrates the general idea:&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DiscoveryDomainParticipantListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_publisher_discovery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;eprosima&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FastDDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DomainParticipant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;participant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;eprosima&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastrtps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rtps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriterDiscoveryInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;participant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eprosima&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastrtps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rtps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriterDiscoveryInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DISCOVERED_WRITER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Process the case when a new publisher was found in the domain */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topicName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rt/rosout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Extract GID&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eprosima&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastrtps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rtps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriterDiscoveryInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHANGED_QOS_WRITER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Process the case when a publisher changed its QOS */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eprosima&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastrtps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rtps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriterDiscoveryInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REMOVED_WRITER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Process the case when a publisher was removed from the domain */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So, you may notice that FastDDS topic corresponds to the exact topic in ros2 except the “rt” prefix. The primary language of my project is Rust, so I had to write C wrappers in order to use FastDDS capabilities. But the general idea remains the same, so you may adapt the code provided below to C++ without any problems. The process of finding the exact node name with only the topic name known may look like:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;node_name_by_gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topic_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ros2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;topic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;info&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;--verbose&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;failed to execute process&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RegexMatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&quot;Node name:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SearcherBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.before_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.after_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;searcher&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.search_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data_bytes&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.stdout&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;UTF8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mymatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lnum&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mymatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.starts_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GID: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.starts_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid_search&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_name_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lnum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_name_line&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_name&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The most easiest way to get info about ROS2 topics (but not the most effective) is to use ROS2 cli as I have done. This is a simplified version of code used in my hobby project. So, I have to rewrite it in a more sophisticated way in the future, but for this moment, that is enough because it works pretty well.&lt;/p&gt;

&lt;p&gt;Also, you have to use the same Domain ID in each program and terminal, of course.&lt;/p&gt;

&lt;h2 id=&quot;cautions&quot;&gt;Cautions&lt;/h2&gt;
&lt;p&gt;Besides sourcing ros2 environment with the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sh /opt/ros/{version}/setup.sh&lt;/code&gt; you have to set the environment variable ROS_DISCOVERY_SERVER with the address of the target the server runs on. In the case of localhost, it may look like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ROS_DISCOVERY_SERVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1:11811&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Of course, you have to specify the same address and port when you create a discovery server.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To sum up, despite the fact of a lack of information about a node name in FastDDS middleware due to participant reusing for multiple nodes, there is a way to obtain a node name from topic (Writer or Reader) gid. With the given name, we may extract useful information from FastDDS writer or reader and then use it on the ROS2 side.&lt;/p&gt;

&lt;p&gt;By the way, FastDDS has a great &lt;a href=&quot;https://fast-dds.docs.eprosima.com/en/latest/&quot;&gt;documentation&lt;/a&gt; with many examples, so if you want to read more don’t hesitate to look into.&lt;/p&gt;

&lt;h1 id=&quot;useful-links&quot;&gt;Useful links&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;FastDDS docs: https://fast-dds.docs.eprosima.com/en/latest/&lt;/li&gt;
  &lt;li&gt;Enabling discovery server in ros2: https://fast-dds.docs.eprosima.com/en/latest/FastDDS/ros2/ros2.html&lt;/li&gt;
  &lt;li&gt;Using FastDDS features with ROS2: https://docs.ros.org/en/iron/Tutorials/Advanced/FastDDS-Configuration.html&lt;/li&gt;
  &lt;li&gt;An example of implementing listener for FastDDS discovery server: https://fast-dds.docs.eprosima.com/en/latest/fastdds/discovery/disc_callbacks.html&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Author - Kuchkov Aleksey</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/logos/dds_logo.jpg" /><media:content medium="image" url="/assets/logos/dds_logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>